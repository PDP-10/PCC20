;
;	C20LOD - Load-Time Initialization (TOPS20)
;

TITLE C20LOD
.INSRT <C>NC
.INSRT <C>NM

.GLOBAL TIMING,PZERO,PUSHD

.IDATA
;	NO LITERALS IN THIS CODE!

IENTRY	LINIT

	MOVEI	P,ARGV"		; TEMPORARY PDL

IENTRY	ISTART

	JFCL

	; SETUP SEGMENT BOUNDARIES

	HLRZ	A,20
	MOVEM	A,SEG0LO
	HRRZ	A,20
	MOVEM	A,SEG0HI
	SETZM	20
	HLRZ	A,21
	MOVEM	A,SEG1LO
	HRRZ	A,21
	MOVEM	A,SEG1HI
	SETZM	21
	HLRZ	A,22
	MOVEM	A,SEG2LO
	HRRZ	A,22
	MOVEM	A,SEG2HI
	SETZM	22
	HLRZ	A,23
	MOVEM	A,SEG3LO
	HRRZ	A,23

	HRRZ	B,23+1		; On tops-20, the symbol table
				; is written as segment 4.  At run time,
				; however, we prefer to consider the
				; symbol table to be part of segment 3.
	CAML	B,A		; In case the symbol table is written other
				; than where we expect (possible in the case
				; of a shared library), then make sure that
				; seg3hi is not decreased.
	 MOVE	A,B
	MOVEM	A,SEG3HI
	SETZM	23
	SETZM	24

	; NOW LOOK FOR .CCALLS TO SMASH

I$SMSH:	SKIPE	TIMING		; DON'T SMASH IF TIMING
	 GO	I$S7
	SKIPA	A,SEG2LO	; POINTER TO BEGINNING OF CODE AREA
I$S1:	 ADDI	A,1		; NEXT WORD
	CAML	A,SEG2HI	; AT END OF CODE AREA?
	 GO	I$S7		; DONE
	HLRZ	B,(A)		; INSTRUCTION
	TRZ	B,000777	; ISOLATE OPCODE
	CAIE	B,(.CCALL)	; IS IT A .CCALL?
	 GO	I$S1		; NO, GO ON
	HLRZ	B,(A)		; THE INSTRUCTION AGAIN
	TRNN	B,000037	; IS INDEXING OR INDIRECTION USED
	 GO	I$S6		; NO, IT'S A CONSTANT CALL
	TRZ	B,777000	; SMASH OPCODE
	IORI	B,(.VCALL)	; MAKE IT A .VCALL
	HRLM	B,(A)		; SMASH THE .CCALL
	GO	I$S1		; GO ON TO NEXT WORD

I$S6:	HRRZ	C,(A)		; THE CALLED PROCEDURE
	JUMPE	C,I$S1		; NO SUCH PROCEDURE
	HLRZ	0,-1(C)		; THE NUMBER OF FORMAL ARGS
	CAIL	0,20		; REASONABLE NUMBER?
	 GO	I$S1		; NO, NOT A PROCEDURE
	LDB	B,[270400,,(A)]	; THE NUMBER OF ACTUAL ARGS
	CAIE	0,(B)		; DO THE NUMBERS MATCH?
	 GO	I$S2		; NO
	MOVEI	B,(PUSHJ P,)
	HRLM	B,(A)		; SMASH .CCALL TO PUSHJ
	GO	I$S1

	; HERE IF NUMBER OF ACTUALS AND FORMALS ARE DIFFERENT

I$S2:	SUBI	0,(B)		; NUMBER OF EXTRA ACTUALS NEEDED
	JUMPL	0,I$S5		; TOO MANY ACTUALS GIVEN
	MOVE	B,0
	ADDI	B,2
	CL	I$ALLC		; ALLOCATE SPACE FOR PROG
	HRRZ	B,D		; ADDRESS OF BLOCK
	HRLI	B,(JSP D,)	; CONSTRUCT CALL TO IT
	MOVEM	B,(A)		; SMASH ORIGINAL CALL
	SUBI	D,1
I$S3:	SOJL	0,I$S4		; FOR EACH MISSING ARG
	PUSH	D,PZERO		; COMPILE A PUSH OF ZERO
	GO	I$S3
I$S4:	PUSH	D,PUSHD		; COMPILE A PUSH OF D (RETURN ADDRESS)
	HRLI	C,(GO)		; MAKE JUMP TO CALLED PROC
	PUSH	D,C		; COMPILE CALL
	GO	I$S1		; FINISHED WITH THIS CALL

	; HERE IF NUMBER OF ACTUALS EXCEEDS NUMBER OF FORMALS

I$S5:	MOVEI	B,3		; GET TWO WORDS
	CL	I$ALLC
	HRRZ	B,D		; ADDRESS OF BLOCK
	HRLI	B,(JSP D,)	; MAKE CALL TO IT
	MOVEM	B,(A)		; SMASH ORIGINAL CALL
	MOVN	B,0		; NUMBER OF EXTRA ARGS
	HRLI	B,(SUBI P,)	; CONSTRUCT INSTRUCTION
	MOVEM	B,(D)		; STORE IN BLOCK
	MOVE	B,PUSHD
	MOVEM	B,1(D)
	HRLI	C,(GO)		; MAKE JUMP TO CALLED PROC
	MOVEM	C,2(D)		; STORE IN BLOCK
	GO	I$S1		; FINISHED WITH THIS CALL
I$S7:

IENTRY	IDONE

	JFCL
	SETZB	A,0
	SETZB	B,C		; CLEAN UP
	SETZ	D,		; LIKE A GOOD BOY SHOULD
	HALTF			; RETURN TO LOADER

	; STORAGE ALLOCATOR FOR .CCALL COMPILER
	; CALL WITH SIZE IN B
	; RETURNS ADDRESS IN D

I$ALLC:	MOVE	D,SEG3HI	; TOP OF PATCH SPACE
	ADDI	D,1		; POINT TO NEW BLOCK
	ADDB	B,SEG3HI	; NEW TOP OF PATCH SPACE
	RTN

;	THESE VARIABLES ALSO USED BY SORRY AND MPV-HANDLER (ITS ONLY)
;	AND BY START (TOPS-20 ONLY)

.IDATA
MDATA	SEG0LO
	0
MDATA	SEG0HI
	0
MDATA	SEG1LO
	0
MDATA	SEG1HI
	0
MDATA	SEG2LO
	0
MDATA	SEG2HI
	0
MDATA	SEG3LO
	0
MDATA	SEG3HI
	0

.CODE
END
