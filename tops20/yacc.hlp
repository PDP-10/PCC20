Operating syntax:

yacc [switches] input.y

switches;
-v		create y.output (describes states)
-d		create ytab.h  (help file; contains token defs)

output is to ytab.c; should be compiled with C:PCC20.EXE
the file YACC.PAR should be available on the device C:

----------------------------------------------------------------

YACC Input syntax;

/* Comment */

both '\' and '%' can be used to prefix pseudo-ops

%{ text				pass text to output file
%}

%type				define type?
%union				define union?
%start				specify start state?
%term, %token, %0		specify tokens
%<, %left			specify left associativity
%2, %binary, %nonassoc		specify no associativity
%>, %right			specify right associativity
%%, \\				mark - beginning of grammar

/* productions */
name:
	production1		={ action; }
	| production2		={ act2; }
	.
	.

/* actions (need not be present) */

$<ident>			???
$$				yyval -- production value
$-				???
$n				value of nth token in production

----------------------------------------------------------------------------

To be supplied;

char *c;

yyermsg(c)			/* YACC fatal error message */
yylex()				/* lexical analyzer -- returns characters,
				   values from ytab.h, or -1 on EOF */
yylval				/* lexical value set by yylex()
				   ie; pointer to identifier string */

PCC20 demands that its segments be located on SS:<C>, and the MIDAS
code produced .INSRTS files from PS:<C>; Therefore PS:, and SS: must
be re-DEFINED.

ytab.c will contain the routine yyparse, the file c:yacc.par.

yparse takes no arguments and returns 0 on a successful parse.  When
an (unrecoverable) error occurs yyermsg is called with a message
string of "syntax error" or "yacc stack overflow".

To debug a parser put a "# define YYDEBUG" at the top of your ytab.c
to include debugging code, and deposit a '1' in the global yydebug
(ZYYDEB) to turn on typeout.


yyparse will attempt to recover from an error by popping the stack or
discarding input tokens until a continuable state is found.  No indication
is made when error recovery is attempted.
