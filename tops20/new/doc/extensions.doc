
1. Introduction
  This  note  describes  several  features  of the C programming language which
exist in the TOPS-20 C compiler  but  are  not  described  in  the  standard  C
reference  manual.  These changes reflect the continued growth and evolution of
the C language, and are incorporated in all recent C compilers.

2. Enumerated Data Types
  The Enumerated Data Type allows the programmer to  specify  scalar  variables
which  may  take  on  any  of  a range of user-specified values.  The syntax of
Enumerated Data Type declarations is reminiscent of that for structures:

    enum colors {red, yellow, blue, green};

which specifies the type without declaring any variables, or

    enum colors {red, yellow, blue, green} sky, car;

which declares two variables sky and car of  enumerated  type  colors.    Types
defined  with  the  first  declaration  form above may later be used to declare
variables:

    enum colors leaf;

which declares the variable leaf.

  Once declared, enumerated type variables and constants may be  used  anywhere
an integer would be legal. They may be assigned:

    leaf = green;

compared:

    if (leaf == green) ...

or passed as parameters to functions.

  Internally,  the  values  of an Enumerated Data Type are represented as small
integers starting with zero and assigned in the order that the possible  values
of  the type are listed in the declaration. If such a value is output to a file
or the terminal it will be printed as an integer, rather than with  its  name.

Enumerated  data  values  may be compared using the normal relational operators
(<, >, etc.) for integers.

  While all Enumerated Data Types are represented internally as integer values,
each is considered to be a seperate type. It is a mistake to attempt to  assign
an  integer  or  member  of  another Enumerated Type to an Enumerated Data Type
variable. Such actions will draw a warning message from the  compiler.  If  one
wishes to intentionally do this, use of the type cast operation is needed.

3. Structure Assignment
  Structure  data  objects  may  now  be  assigned  to  one  another, passed as
parameters to functions, and returned as values from functions. The  syntax  of
such  operations is exactly that of operations involving scalar data types. For
example:

    struct foo {
            int a;
            char *b;
            } x, y, foogen();

declares two variables of type struct foo, and  a  function  returning  such  a
type. We may now write:

    x = foogen();
    y = x;

just as we could if x and y were of type int. Additionally, we could write:

    int funct(a,b)
    struct foo a,b;
    {
            ...
            body of function
            ...
    }

to declare a function which accepts objects of type struct foo as arguments.

  Structures,  like  scalar  types,  are  assigned,  passed  as parameters, and
returned by value. Thus a function receiving a structure as  an  argument  will
receive  it's  own  copy  of  the  structure,  while an assignment statement or
function returning a structure value will copy the appropriate  data  into  the
receiving  variable.  Obviously  such  copying actions require more time than a
simple passing of pointers.  In  the  TOPS-20  compiler  these  operations  are
implemented  by use of the hardware BLT (BLock Transfer) instruction, resulting
in only a small time penalty.

  Attempting to assign an object of one structure type to a variable of another
structure type will  draw  a  compiler  warning.  Such  an  assignment  may  be
performed  without  warnings  using  the  type  cast  operator,  but  it is the
responsibility of the programmer to insure that the object being assigned  will
fit in it's destination space without overwriting other data.
