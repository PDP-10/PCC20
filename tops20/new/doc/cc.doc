

1. Introduction
  This  note  describes  the  process  of  compiling,  linking, and running a C
program on the DECSYSTEM-20.  It  assumes  that  you  already  have  a  working
knowledge  of  both  the  C programming language and the standard I/O packages.
The definitive C reference manual is "The  C  Programming  Language"  by  Brian
Kernighan  and  Dennis  Ritchie.  Further information about I/O routines may be
had by looking at the sources, which are in the directory CLIB:

  The C compiler described here is based on the Portable C Compiler written  by
S. C.  Johnson  of  Bell  Labs.  The PDP-10 code generator was written by Eliot
Moss and Chris Terman of the MIT Lab for Computer Science, and John  Wroclawski
of the MIT Research Lab of Electronics.

  THIS  IS  LICENSED  SOFTWARE.  You should feel perfectly free not to steal it
from this machine. Copies of the compiler are available to  any  not-for-profit
organization  that  has  a  valid  UNIX  (which,  as  we  all know by now, is a
trademark of Bell Labs) version 7 license.

2. Compiler Characteristics



2.1. Language Implementation
  This compiler implements the full C language, as described in  Kernighan  and
Ritchie.    In  addition  this  compiler  supports  enumerated  data  types and
structure assignment and parameter passing.  These recent extensions to  the  C
language  are  described  in the file CDOC:EXTENSIONS.DOC. The type-checking of
this compiler is significantly tighter than that of the old UNIX compilers;  in
particular,  attempts  to assign an integer to a pointer variable or vice versa
will result in a warning message. The compiler will let you do these things, it
just makes sure to tell you you are doing it.

  The compiler supports both the old and new forms for assignment operators and
initializers, although the old forms result in a warning.



2.2. Datatypes
  All datatypes are stored in one PDP-10 word (36 bits).  You can  thus  assign
things  to  different datatypes without fear of losing information.  If you are
writing portable  software  you  should,  of  course,  be  more  careful  about
representational  issues.  Note  that strings take up 36 bits per character and
can therefore use lots of memory.

2.3. Names
  Variable  names which are internal to a single file may be of any length, and
are  completely unique,  with  case  being significant.  This  includes  STATIC
variables  and  functions, AUTO variables, typedef'd types, ENUM type names and
members, and structure and union tagnames  and  member  names.  Variable  names
which  must  be  handled  by  the  linker  must be unique to within the first 5
characters, with no case significance.    This  includes  EXTERN  function  and
variable names. They may still be of any length, however.

3. Compiling
  The compiler is executed by typing

    cc <filenames> <switches>

to  the  exec.  <filenames>  is  a  list  of  one  or  more filenames, possibly
containing wildcard characters, and separated by  spaces.    The  extension  on
<filenames>  defaults  to  .c,  if  your  file has another extension it must be
specified.  CC will invoke (one or more of) the C preprocessor, compiler,  code
optimizer, assembler and linker for each file, depending on the <switches>.



3.1. Compiler Switches
  Several  switches  may be specified to control the operation of the compiler.
They are typed on the command line preceded by a minus sign.   At  present  the
switches are:

-c              Compile only, do not assemble

-l              Link file with standard runtime library to produce a .EXE file

-d              Generate  debugging  code. See the file CDOC:DEBUG.DOC for more
                info

-f              Write compiler errors to <file>.cerr, rather than to terminal

-g              Do not delete assembler source file

-k              Keep intermediate files (preprocessor  output  and  unoptimized
                assembler source, if present)

-o              Run  code  optimization phase (NOTE: the optimizer occasionally
                screws up and breaks your code - use with caution)

-r              Beep when finished compiling

  The  -c  flag  is  useful  to  syntax  check  a  file  in the early stages of
development. The -l flag may be used to directly  generate  a  runnable  (.EXE)
file for simple programs (see 4)

  As an example, the command line

    cc foo -lr

would cause the compiler to compile the file foo.c, link it with the standard C
runtime  library  to  form  a  runnable  image, and beep the terminal bell when
finished.



3.2. Error Messages
  Most of the compiler error messages are self-explanatory.  Messages  come  in
two  forms; errors and warnings. Warnings generally do not affect the operation
of a program, but are provided to inform you of possibly  ambiguous  constructs
or type clashes.

  When  a syntax error is discovered, the compiler attempts to bypass the error
so that it may continue checking for later errors.  Often this process  results
in some spurious errors until the parser unconfuses itself. Thus if you receive
a  large  group of error messages clustered around a certain point in the file,
fixing the first one will often eliminate the others as well.

  Occasionally the message "Assembler Errors"  will  appear.    This  generally
means that two EXTERN variable or function names in your program have mapped to
the  same  label  in the assembly code. This happens because external names are
unique only to the first five characters.  (see  2.3)  Error  output  from  the
assembler  is written to <file>.err, and will provide hints as to the offending
names.

4. Linking
  After you have compiled your program you must link  it  with  the  C  runtime
routines  to  produce  an  executable  image.  There are two ways to accomplish
this.

    -Use the -l flag to the compiler

    -Run the linker as a separate program

The  -l  flag  is  useful  when  you  are writing a program which is completely
contained in one file,  and  requires  only  the  runtime  functions  from  the
standard  library. If the file you are compiling meets these conditions, giving
the -l flag to CC will cause it to run the linker for you, directly producing a
runnable program.



4.1. The Linker
  If your program is split among many files, or you need to link in a  function
from  the  library  that  is  not automaticaly loaded, you will have to run the
linker yourself. (see 4.2 for an easy way to do this repetitively) The  current
C linker program is called STINKR. Stinkr has several commands, of which only 5
are relevant to the normal user. The commands are:

l <file>        load file <file>

x <file>        execute command file <file>

o <file>        specify output file name

q               link files, then exit

; <anything>    a comment

  Blank command lines are ignored.

  The  basic  operation  of  STINKR  is  to  read  all of the commands, loading
specified files and remembering the other information.  When the basic  command
file  is  finished  (or  q  is  typed, if terminal input), STINKR then does the
following:

  1. prints a list of undefined symbols, if any

  2. prints a segment map

  3. writes the program to output file, if specified

Stinkr commands and options are further described in the file  CDOC:STINKR.DOC,
however the normal user will not find that information necessary.

  To link a C program, first run the linker by typing

    stinkr

to the exec. When the '=' prompt appears, type

    x c:stdio

This  causes  the  contents  of  the  file  c:stdio.stinkr to be read as STINKR
commands, with the result of correctly  setting  up  the  linker  segments  and
initialization  routine,  and  loading  in  the standard runtime package.  Next
specify the name(s) of the file(s) containing your program using the l command:

    l <filename>

No extension is needed on the filename; the  correct  extension  .stk  will  be
appended automatically. If a program is spread over several seperately compiled
files, simply give the l command to STINKR for each file you wish to load.

  Finally,  specify  the name of the .exe file you wish the final program to be
written into, using the o command

    o outfile.exe

In this case the .exe extension must be explicitly typed. Lastly, typing the  q
command will cause STINKR to link your program and write it out.



4.2. Linker Command Files
  To  make this process easier you may put all of the STINKR commands needed to
link a program into a command file  with  the  extension  .stinkr,  and  invoke
STINKR with the name of that file as an argument

    stinkr foo

invokes  stinkr  and  causes  it  to execute the commands contained in the file
foo.stinkr. This method is useful for programs composed of many  source  files,
or those which are frequently recompiled.

5. Example
  This  example shows the steps needed to compile the program foo.c and produce
the executable version.  and = prompts are typed by the computer, all  else  is
typed by you.

    @cc foo
    @stinkr
    =x c:stdio
    =l foo
    =o foo.exe
    =q

After a short wait, STINKR will print some information, then return you to exec
level.  Your  program  may  then  be  run in the normal TOPS-20 fashion. If the
program is executed using the EXEC's RUN command or is started  from  DDT,  you
will  be  given the opportunity to specify a command line. If the program is in
the user's SYS: search path and is executed by name,  any  text  following  the
program  name  will be used as the command line. In either case the program may
view it's command line through use of the standard argc and argv  arguments  to
the main function.

6. I/O Redirection
  I/O  redirection,  as in UNIX, is supported by the runtime package. Thus, for
example, typing

    foo <infile.txt >outfile.txt

will cause the program foo to be executed with stdin  connected  to  infile.txt
and stdout connexted to outfile.txt. Redirection of stderr is also supported.

  For  more information about available I/O routines, see the first part of the
file   CLIB:C20IO.C.   Several   other   files   in   the    CLIB:    directory
(date,files,string)  contain  specialized  I/O  routines.  These  files are not
automatically loaded with the runtime system, but must be specified in a STINKR
'l' command.

                               Table of Contents
1. Introduction                                                               0
2. Compiler Characteristics                                                   0
     2.1. Language Implementation                                             0
     2.2. Datatypes                                                           0
     2.3. Names                                                               1
3. Compiling                                                                  1
     3.1. Compiler Switches                                                   1
     3.2. Error Messages                                                      2
4. Linking                                                                    2
     4.1. The Linker                                                          3
     4.2. Linker Command Files                                                4
5. Example                                                                    4
6. I/O Redirection                                                            5