[CC.HLP JTW 5/8/82]

This file gives terse information and examples for use of the DECsystem-20 
C compiler. For lots of more detailed information, see the file C:CC.DOC.

-> COMPILING

	The compiler is executed by typing

cc <filename> <switches>

to  the exec. The extension on <filename> defaults to .c, if your file
has another extension it must be specified.  

-> COMPILER SWITCHES

	Several switches control the operation of the compiler. They are
typed on the command line preceded by a minus sign. The more useful ones
are:

-c              Compile only, do not assemble

-l		Link compiled code with standard runtime library to
		form a runnable image (.EXE file)

-d              Generate  debugging  code. This isn't finished yet. 
		See the file C:DEBUG.DOC for more info.

-f              Write compiler errors to file.cerr, rather than to terminal.

-r              Beep when finished compiling


As an example, the command line

cc foo -lr

would cause the compiler to compile the file foo.c, link it with the standard
C runtime library to form a runnable image, and beep the terminal bell when
finished.

-> LINKING

	A program contained within one file and needing only the standard
runtime library can be automatically loaded (linked) by giving the -l switch 
to the compiler.

	Programs spread among many files or desiring special library
functions currently must be linked by hand. To link a C program, first run 
the linker by typing:

@stinkr

to the exec. When the '=' prompt appears, type

x c:stdio

This  causes  the  contents of the file c:stdio.stinkr to be  read  as
STINKR  commands,  with  the result of correctly setting up the linker
segments and  initialization  routine,  and  loading  in  the  runtime
package.  Next  specify  the  name(s)  of  the file(s) containing your
program using the l command:

l <filename>

No extension is needed on the filename;  the  correct  extension  .stk
will  be appended automatically. Finally, specify the name of the .exe
file you wish the final program  to  be  written  into,  using  the  o
command

o outfile.exe

In  this  case  the  .exe  extension must be explicitly typed. Lastly,
typing the q command will cause STINKR to link your program and  write
it out.

Alternatively you can put all necessary STINKR commands in a file, and
cause STINKR to read this file as a command file by simply saying

@stinkr <file>

The file extension for a STINKR command file is .stinkr

EXAMPLE

	This example shows the steps needed to compile and link a program 
contained in the files foo.c and bar.c. @ and = prompts are typed by the 
computer, all else is typed by you.

@cc foo
cc bar
@stinkr
=x c:stdio
=l foo
=l bar
=o myprog.exe
=q

After  a  short  wait, STINKR will print some information, then return
you to exec level. Your program may then be run simply by typing its
name.

Again, see C:CC.DOC for more information.

[End of CC.HLP]