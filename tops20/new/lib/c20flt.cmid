;
;	cfloat - floating point arithmetic functions
;
;	this file is pdp-10 dependent, system-independent.
;

title cfloat
.insrt c:minsrt

; contains: log, exp, cos, sin, atan, sqrt, dtruncate, dround, dabs

centry	log,[v]

	move	b,v
	jumple	b,outrng
	ldb	d,[331100,,b]	;grab exponent
	subi	d,201		;remove bias
	tlz	b,777000	;set exponent
	tlo	b,201000	; to 1
	move	a,b
	fsbr	a,sqrt2
	fadr	b,sqrt2
	fdvb	a,b
	fmpr	b,b
	move	c,[0.434259751]
	fmpr	c,b
	fadr	c,[0.576584342]
	fmpr	c,b
	fadr	c,[0.961800762]
	fmpr	c,b
	fadr	c,[2.88539007]
	fmpr	c,a
	fadr	c,[0.5]
	move	b,d
	fsc	b,233
	fadr	b,c
	fmpr	b,[0.693147180]	;log e of 2
	move	a,b
	return

centry	exp,[v]

	move	b,v
;	push	p,b	; don't play with stack !!!
	movm	a,b
	setzm	b
	fmpr	a,[0.434294481]	;log base 10 of e
	move	d,[1.0]
	camg	a,d
	 jrst	ratex
	muli	a,400
	ashc	b,-243(a)
	caile	b,43
	 jrst	outrng
	caile	b,7
	 jrst	expr2
expr1:	fmpr	d,floap1(b)
	ldb	a,[103300,,c]	
	caie	a,0
	 tlo	a,177000
	fadr	a,a
ratex:	movei	b,7
	setzm	c
ratey:	fadr	c,coef2-1(b)
	fmpr	c,a
	sojn	b,ratey
	fadr	c,[1.0]	
	fmpr	c,c
	fmpr	d,c
	move	b,[1.0]
;	skipl	(p)		;skip if input negative
	skipl	v		; just use arg value !!!
	 skipn	b,d
	  fdvr	b,d
	move	a,b
	return

expr2:	ldb	d,[030300,,b]	
	andi	b,7
	move	d,floap1(d)
	fmpr	d,d		;to the 8th power
	fmpr	d,d
	fmpr	d,d
	jrst	expr1

coef2:	1.15129278
	0.662730884
	0.254393575
	0.0729517367
	0.0174211199
	2.55491796^-3
	9.3264267^-4

floap1:	1.0
	10.0
	100.0
	1000.0
	10000.0
	100000.0
	1000000.0
	10000000.0

outrng:	croak [argument out of range]
	jrst	rtn1

centry	cos,[v]

	move	b,v
	fadr	b,[1.570796326]		;cos(x)=sin (x+pi/2)
	ccall	sin,[b]
rtn1:	return

centry	sin,[v]

	move	b,v
	pushj	p,.sin
	return

.sin:	movm	a,b
	camg	a,[.0001]
	 popj	p,		;gosper's recursive sin.
	fdvr	b,[-3.0]	;sin(x)=4*sin(x/-3)**3-3*sin(x/-3)
	pushj	p,.sin
	fsc	a,1
	fmpr	a,a
	fadr	a,[-3.0]
	fmprb	a,b
	popj	p,

centry	sqrt,[v]

	move	b,v
			;; added 3/8/83 RCA
	setz	a		; return 0 if v <= 0
	jumple	b,sq3
			;;
	move	a,b
	ash	b,-1
	fsc	b,100
sq2:	move	c,b		;newton's method, speciner's hack.
	fdvrm	a,b
	fadrm	c,b
	fsc	b,-1
	came	c,b
	 jrst	sq2
	move	a,b
sq3:	return

centry	atan,[v],[temp]

	move	b,v
	movem	b,temp
	movm	d,b
	camg	d,[0.4^-8]	;small enough so atan(x)=x?
	 jrst	atan3		;yes
	caml	d,[7.0^7]	;large enough so that atan(x)=pi/2?
	 jrst	atan1		;yes
	movn	c,[1.0]
	camle	d,[1.0]		;is abs(x)<1.0?
	 fdvm	c,d		;no,scale it down
	move	b,d
	fmpr	b,b
	move	c,[1.44863154]
	fadr	c,b
	move	a,[-0.264768620]
	fdvm	a,c
	fadr	c,b
	fadr	c,[3.31633543]
	move	a,[-7.10676005]
	fdvm	a,c
	fadr	c,b
	fadr	c,[6.76213924]
	move	b,[3.70925626]
	fdvr	b,c
	fadr	b,[0.174655439]
	fmpr	b,d
	jumpg	d,atan2		;was arg scaled?
	fadr	b,pi2		;yes,  atan(x)=pi/2-atan(1/x)
	jrst	atan2
atan1:	move	b,pi2
atan2:	skipge	temp		;was input negative?
	 movns	b		;yes,complement
atan3:	move	a,b
	return

sqrt2:	1.41421356
pi2:	1.57079632675		; bogus pi2:	3.1415926535/2.0

centry	dround,[v]

	movm	a,v
	fadr	a,[.499999]
	fix	a,a
	skipge	v
	 movn	a,a
	return

centry	dtruncate,[v]

	fix	a,v
	return

centry	dabs,[v]

	move	a,v
	jumpge	a,ret
	movn	a,a
	jumpge	a,ret
	tlz	a,400000
ret:	return

end
