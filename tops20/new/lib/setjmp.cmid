;
;	setjmp(), longjmp(), _dismiss() - nonlocal flow of control
;	note - unlike UNIX you cannot directly longjmp out of
;	an interrupt routine. You may however do so by calling
;	the system function _dismiss() before doing the longjmp.
;	This will put you back in process context. Then you can 
;	longjmp() off to where you want to be.

title setjmp
.insrt c:minsrt

subttl setjmp - save a stack environment

comment |

After the CENTRY macro, the stack looks like this:

	(P) ->	Old frame ptr 
	-1(P)->	Return address
	-2(P)->	Argument to setjmp()

|; end comment

centry	setjmp,[envp]

	hrrz a,envp		;get environment pointer
	move b,-1(p)		;return pc
	movem b,(a)		;save return pc
	move b,p		;get current sp
	adjsp b,-2		;sp before call
	movem b,1(a)		;save stack pointer
	move b,(p)		;get pre-call frame pointer
	movem b,2(a)		;save it away.
	setz a,			;return zero
	return


subttl longjmp - return to a stack environment saved by setjmp

centry	longjmp,[envp,val]

	hrrz b,envp		;get env pointer
	move a,val		;set up the return value
	hrrz d,(b)		;pick up return address
	move p,1(b)		;restore stack pointer
	move ep,2(b)		; and frame pointer
	jrst (d)		;and off we go


subttl _dismiss() - leave interrupt context

.global intnum,pclev3		;in C20RUN

centry	%dismiss
	skipn	intnum		;doing an interrupt?
	 jrst	ds$1		;no, just return
	movei	b,ds$1		;yes, get a place for debrk to return to
	hrli	b,010000	;turn on user-mode bit
	movem	b,pclev3	;make this saved address
	setzm	intnum		;no more interrupt
	debrk			;dismiss
ds$1:	return			;and say goodbye


	end
