;
;	string - c string, byte, and bit routines
;
;	this file is pdp-10 dependent, system-independent.
;

title string
.insrt c:minsrt

;	contains:

;	strlen			; string length
;	strcpy			; string copy
; 	strncpy			; fixed length string copy
;	strcat			; string concatenate
;	strcmp			; string compare
;	strncmp			; fixed length string compare

;	pack			; pack C strings into PDP10 words
;	npack			; pack N-char C strings into PDP10 words
;	unpack			; unpack PDP10 words into C strings
;	nunpack			; unpack PDP10 words into N-char C strings

;	bget			; bit array bit get
;	bset			; bit array bit set

;	ildb			; increment and load byte
;	idpb			; increment and deposit byte

centry	strlen,[str]		; string length

	move	b,str		; pointer to string
sl$1:	skipe	(b)		; get next character
	 aoja	b,sl$1
	sub	b,str
	movei	a,(b)
	return

centry	strcat,[dest,src]	; string copy

	; concatenate source string to end of destination string
	; return pointer to destination

	move	b,src		; source pointer
	move	a,dest		; destination pointer
sct$1:	skipe	(a)
	 aoja	a,sct$1		; find end of string
	subi	b,(a)
	hrli	b,a		; hack to make loop shorter
sct$2:	move	c,@b		; get next char
	movem	c,(a)		; store
	caie	c,0
	 aoja	a,sct$2		; incr both pointers
	move a,	dest		; return pointer to dest for UNIX compatibility
sct$rt:	return

centry	strcpy,[dest,src]	; string copy

	; copy string from src to dest
	; return pointer to dest

	move	b,src		; source pointer
	move	a,dest		; destination pointer
	subi	b,(a)
	hrli	b,a		; hack to make loop shorter
sc$1:	move	c,@b		; get next char
	movem	c,(a)		; store
	caie	c,0
	 aoja	a,sc$1		; incr both pointers
	move 	a,dest		; return pointer to dest
	return

mentry	strncp,[dest,src,n]	; string copy

	; copy n characters from src to dest
	; return pointer to dest
	; renamed in STDIO.H to get full 6-char function name

	push	p,d		; d isn't a temp reg
	move	d,n		; get count
	move	b,src		; source pointer
	move	a,dest		; destination pointer
	subi	b,(a)
	hrli	b,a		; b is now offset(a) - use it as address
snc$1:	move	c,@b		; get next char
	movem	c,(a)		; store
	sojle	d,snc$r		; done enough characters
	caie	c,0
	 aoja	a,snc$1		; incr both pointers
	aos	a,		; end of source, but not enough chars
snc$2:  movem	c,(a)		; write zeros to rest of dest
	sosle	d		; check count
	 aoja	a,snc$2		; incr ptr and loop
snc$r:	pop	p,d		; restore register
	return


centry	strcmp,[s1,s2]		; string compare

	move	b,s1		; pointer to s1
	move	c,s2		; pointer to s2
	subi	c,(b)		; c has s2-s1
	hrli	c,b		; c is now offset(b)
sm$1:	move	a,(b)		; get next char from s1
	came	a,@c		; compare it with char from s2
	 jrst	sm$2		; jump if difference
	caie	a,0		; end of string?
	 aoja	b,sm$1		; no, back for more
	movei	a,0		; they were equal, return 0
	return
				; here if they not equal
sm$2:	caml	a,@c		; a has char from s1
	 skipa	a,[1]		; s2 was greater, return 1
	move 	a,[-1]		; s1 was greater, return -1
	return

mentry	strncm,[s1,s2,n]	; fixed length compare
				; renamed in STDIO.H

	push 	p,d		; d isn't a temp
	move 	d,n		; length
	move	b,s1		; pointer to s1
	move	c,s2		; pointer to s2
	subi	c,(b)		; c has s2-s1
	hrli	c,b		; c is now offset(b)
snm$1:	move	a,(b)		; get next char from s1
	came	a,@c		; compare it with char from s2
	 jrst	snm$2		; jump if difference
	jumpe	a,snm$3		; end of string?
	 sosle	d		; or done enough characters?
	 aoja	b,snm$1		; no, back for more
snm$3:	movei	a,0		; they were equal, return 0
	pop	p,d		; restore reg
	return
				; here if strings differ
snm$2:	caml	a,@c		; a has char from s1
	 skipa	a,[1]		; s2 was greater, return 1
	move 	a,[-1]		; s1 was greater, return -1
	pop	p,d		; restore reg
	return

centry	lower,[ch]		; cvt char to lower case

	move	a,ch
	cail	a,"A
	 caile	a,"Z
	  caia
	   addi	a,"a-"A
	return

centry	upper,[ch]		; cvt char to upper case

	move	a,ch
	cail	a,"a
	 caile	a,"z
	  caia
	   subi	a,"a-"A
	return


centry	pack,[str,wp]		;pack C string into PDP10 words at wp

	move 	a,str		;address of string
	hrrz	b,wp		;address of words to pack
	hrli	b,440700	;make a byte ptr
p$1:	move	c,(a)		;get char
	idpb	c,b		;save it
	caie	c,0		;done?
	aoja	a,p$1		;no, incr string pointer
	move	a,wp		;return address of first word
	return

centry	unpack,[str,wp]		;unpack 7-bit chars at WP to C string

	move 	a,str		;address of string
	hrrz	b,wp		;address of words
	hrli	b,440700	;make bp
up$1:	ildb	c,b		;get char
	movem	c,(a)		;save it
	caie 	c,0		;done?
	aoja	a,up$1		;no
	move	a,str		;return address of string
	return

centry	npack,[str,wp,n]	;pack N chars from C string to PDP10
				; words. Null fill if needed.

	push	p,d
	move	d,n
	move	a,str
	hrrz 	b,wp
	hrli	b,440700
np$1:	move	c,(a)		;get char
	idpb	c,b		;into word
	sojle	d,np$r		;enough chars
	caie	c,0		;end of string?
	aoja	a,np$1		;nope, do more
np$2:	idpb	c,b
	sojg	d,np$2
np$r:	pop	p,d
	return


centry	bget,[barray,bindex]	; bit array bit get

	hrrz	c,bindex
	hrrz	a,barray
	movei	b,(c)		; subscript

	lsh	c,-5		; get word offset
	addi	a,(c)		; get word address
	move	a,(a)		; get the word
	andi	b,37		; bit offset
	rot	a,1(b)		; put bit in right-most position
	andi	a,1		; get the bit
	return

centry	bset,[barray,bindex]	; bit array bit set

	hrrz	c,bindex
	hrrz	a,barray
	movei	b,(c)		; subscript
	
	lsh	c,-5		; get word offset
	addi	a,(c)		; get word address
	andi	b,37		; bit offset
	movn	b,b		; negative bit offset
	movei	c,1		; a bit
	rot	c,-1(b)		; put in right position
	iorm	c,(a)		; smash array word
	movei	a,1
	return

centry	ildb,[abptr]		; increment and load byte

	ildb	a,@abptr
	return

centry	idpb,[ch,abptr]		; increment and deposit byte

	move	b,ch		; the character
	idpb	b,@abptr
	return

end
